version: '3.9'

services:
  postgres:
    image: bitnami/postgresql
    container_name: postgres
    volumes:
      - ./.data/postgres:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d postgres -U user" ]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: none
    restart: always
    shm_size: 128mb
    environment:
      POSTGRESQL_REPLICATION_MODE: master
      POSTGRESQL_REPLICATION_USER: repliaction_user
      POSTGRESQL_REPLICATION_PASSWORD: repliaction_password
      POSTGRESQL_USERNAME: user
      POSTGRESQL_PASSWORD: password
      POSTGRESQL_DATABASE: eschool
      POSTGRESQL_PORT: 5432
      TZ: "Europe/Moscow"
    ports:
      - "5432:5432"
    networks:
      - backend

  postgres-slave:
    image: bitnami/postgresql
    container_name: postgres-slave
    volumes:
      - ./.data/postgres:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d postgres -U user" ]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      POSTGRESQL_REPLICATION_MODE: slave
      POSTGRESQL_REPLICATION_USER: repliaction_user
      POSTGRESQL_REPLICATION_PASSWORD: repliaction_password
      POSTGRESQL_MASTER_HOST: postgres
      POSTGRESQL_USERNAME: user
      POSTGRESQL_PASSWORD: password
      POSTGRESQL_DATABASE: eschool
      POSTGRESQL_PORT: 5433
      TZ: "Europe/Moscow"
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "5433:5432"
    networks:
      - backend

  migrate:
    image: migrate/migrate
    container_name: 'migrate'
    volumes:
      - ./migrations:/migrations
    command: ["-path", "/migrations", "-database",
              "postgres://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}?sslmode=disable",
              "up", "3"]
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - backend

  redis:
    image: redis
    container_name: 'redis'
    command: redis-server --save 60 1 --loglevel warning
    logging:
      driver: none
    volumes:
      - ./.data/redis:/var/lib/redis
      - ./.data/redis-config:/usr/local/etc/storage/redis.conf
    ports:
      - "6379:6379"
    networks:
      - backend

  minio:
    image: minio/minio
    container_name: 'minio'
    command: minio server /data --console-address :9001
    logging:
      driver: none
    volumes:
      - ./.data/minio:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    env_file:
      - .env
    networks:
      - backend

  app:
    image: 'app'
    container_name: 'app'
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - ./.bin/:/app/
      - ./config/:/app/config/
      - ./logs/:/app/logs
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
      minio:
        condition: service_started
    ports:
      - "8080:8080"
    networks:
      - backend

  app-read1:
    image: 'app'
    container_name: 'app-read1'
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - ./.bin/:/app/
      - ./config/:/app/config/
      - ./logs/:/app/logs
    env_file:
      - .env
    environment:
      DB_HOST: "postgres-slave"
    depends_on:
      postgres-slave:
        condition: service_healthy
      app:
        condition: service_started
      redis:
        condition: service_started
      minio:
        condition: service_started
    ports:
      - "8081:8080"
    networks:
      - backend

  app-read2:
    image: 'app'
    container_name: 'app-read2'
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - ./.bin/:/app/
      - ./config/:/app/config/
      - ./logs/:/app/logs
    env_file:
      - .env
    environment:
      DB_HOST: "postgres-slave"
    depends_on:
      postgres-slave:
        condition: service_healthy
      app:
        condition: service_started
      redis:
        condition: service_started
      minio:
        condition: service_started
    ports:
      - "8082:8080"
    networks:
      - backend

  app-mirror:
    image: 'app'
    container_name: 'app-mirror'
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - ./.bin/:/app/
      - ./config/:/app/config/
      - ./logs/:/app/logs
    env_file:
      - .env
    environment:
      DB_HOST: "postgres-slave"
    depends_on:
      postgres-slave:
        condition: service_healthy
      app:
        condition: service_started
      redis:
        condition: service_started
      minio:
        condition: service_started
    ports:
      - "8083:8080"
    networks:
      - backend

  pgadmin:
    image: dpage/pgadmin4
    container_name: 'pgadmin4'
    logging:
      driver: none
    restart: always
    ports:
      - "8888:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: user@postgres.com
      PGADMIN_DEFAULT_PASSWORD: password
    volumes:
      - ./.data/pgadmin:/var/lib/pgadmin
    networks:
      - backend

  debug:
    image: 'debug'
    container_name: 'debug'
    build:
      context: .
      dockerfile: Dockerfile.debug
    volumes:
      - ./.bin/:/app/
      - ./config/:/app/config/
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    ports:
      - "8080:8080"
      - "40000:40000"
    security_opt:
      - apparmor:unconfined
    cap_add:
      - SYS_PTRACE
    networks:
      - backend

  proxy:
    image: nginx
    container_name: 'proxy'
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/static/dist:/static/dist
      - ./docs:/static/docs
      - ./README.md:/static/README.md
      - ./nginx/static/index.html:/static/index.html
      - ./nginx/static/md-renderer.html:/static/md-renderer.html
      - ./logs/nginx:/var/log/nginx
    networks:
      - backend
    depends_on:
      - app
      - app-read1
      - app-read2
      - app-mirror

  app-gin:
    image: 'app'
    container_name: 'app-gin'
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - ./.bin/gin:/app/app
      - ./config/:/app/config/
      - ./logs/:/app/logs
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
      minio:
        condition: service_started
    ports:
      - "8085:8080"
    networks:
      - backend

  app-echo:
    image: 'app'
    container_name: 'app-echo'
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - ./.bin/echo:/app/app
      - ./config/:/app/config/
      - ./logs/:/app/logs
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
      minio:
        condition: service_started
    ports:
      - "8086:8080"
    networks:
      - backend

  prometheus:
    image: prom/prometheus:v2.55.0
    container_name: 'prometheus'
    volumes:
      - "./bench/prometheus.yml:/etc/prometheus/prometheus.yml"
      - "./.data/prometheus:/prometheus"
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/usr/share/prometheus/console_libraries"
      - "--web.console.templates=/usr/share/prometheus/consoles"
      - "--web.enable-lifecycle"
    ports:
      - "9090:9090"
    networks:
      - backend

  grafana:
    image: grafana/grafana:11.3.0
    container_name: 'grafana'
    ports:
      - "3000:3000"
    volumes:
      - ./.data/grafana:/var/lib/grafana
      - ./bench/grafana/datasource.yaml:/etc/grafana/provisioning/datasources/datasource.yaml
      - ./bench/grafana/dashboard.yaml:/etc/grafana/provisioning/dashboards/dashboard.yaml
      - ./bench/grafana/gin-vs-echo-dashboard.json:/var/lib/grafana/dashboards/gin-vs-echo-dashboard.json
    networks:
      - backend

networks:
  backend:
    name: "backend"
    driver: bridge
