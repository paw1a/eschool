// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/paw1a/eschool/internal/core/domain"
	mock "github.com/stretchr/testify/mock"
)

// ReviewRepository is an autogenerated mock type for the IReviewRepository type
type ReviewRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, review
func (_m *ReviewRepository) Create(ctx context.Context, review domain.Review) (domain.Review, error) {
	ret := _m.Called(ctx, review)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 domain.Review
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Review) (domain.Review, error)); ok {
		return rf(ctx, review)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.Review) domain.Review); ok {
		r0 = rf(ctx, review)
	} else {
		r0 = ret.Get(0).(domain.Review)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.Review) error); ok {
		r1 = rf(ctx, review)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, reviewID
func (_m *ReviewRepository) Delete(ctx context.Context, reviewID domain.ID) error {
	ret := _m.Called(ctx, reviewID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.ID) error); ok {
		r0 = rf(ctx, reviewID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields: ctx
func (_m *ReviewRepository) FindAll(ctx context.Context) ([]domain.Review, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FindAll")
	}

	var r0 []domain.Review
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]domain.Review, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []domain.Review); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Review)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: ctx, reviewID
func (_m *ReviewRepository) FindByID(ctx context.Context, reviewID domain.ID) (domain.Review, error) {
	ret := _m.Called(ctx, reviewID)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 domain.Review
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.ID) (domain.Review, error)); ok {
		return rf(ctx, reviewID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.ID) domain.Review); ok {
		r0 = rf(ctx, reviewID)
	} else {
		r0 = ret.Get(0).(domain.Review)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.ID) error); ok {
		r1 = rf(ctx, reviewID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindCourseReviews provides a mock function with given fields: ctx, courseID
func (_m *ReviewRepository) FindCourseReviews(ctx context.Context, courseID domain.ID) ([]domain.Review, error) {
	ret := _m.Called(ctx, courseID)

	if len(ret) == 0 {
		panic("no return value specified for FindCourseReviews")
	}

	var r0 []domain.Review
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.ID) ([]domain.Review, error)); ok {
		return rf(ctx, courseID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.ID) []domain.Review); ok {
		r0 = rf(ctx, courseID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Review)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.ID) error); ok {
		r1 = rf(ctx, courseID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindUserReviews provides a mock function with given fields: ctx, userID
func (_m *ReviewRepository) FindUserReviews(ctx context.Context, userID domain.ID) ([]domain.Review, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for FindUserReviews")
	}

	var r0 []domain.Review
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.ID) ([]domain.Review, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.ID) []domain.Review); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Review)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.ID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewReviewRepository creates a new instance of ReviewRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReviewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ReviewRepository {
	mock := &ReviewRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
