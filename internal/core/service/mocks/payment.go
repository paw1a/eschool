// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/paw1a/eschool/internal/core/domain"
	mock "github.com/stretchr/testify/mock"

	url "net/url"
)

// PaymentGateway is an autogenerated mock type for the IPaymentGateway type
type PaymentGateway struct {
	mock.Mock
}

// GetPaymentUrl provides a mock function with given fields: ctx, payload
func (_m *PaymentGateway) GetPaymentUrl(ctx context.Context, payload domain.PaymentPayload) (url.URL, error) {
	ret := _m.Called(ctx, payload)

	if len(ret) == 0 {
		panic("no return value specified for GetPaymentUrl")
	}

	var r0 url.URL
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.PaymentPayload) (url.URL, error)); ok {
		return rf(ctx, payload)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.PaymentPayload) url.URL); ok {
		r0 = rf(ctx, payload)
	} else {
		r0 = ret.Get(0).(url.URL)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.PaymentPayload) error); ok {
		r1 = rf(ctx, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProcessPayment provides a mock function with given fields: ctx, key
func (_m *PaymentGateway) ProcessPayment(ctx context.Context, key string) (domain.PaymentPayload, error) {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for ProcessPayment")
	}

	var r0 domain.PaymentPayload
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (domain.PaymentPayload, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.PaymentPayload); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(domain.PaymentPayload)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPaymentGateway creates a new instance of PaymentGateway. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPaymentGateway(t interface {
	mock.TestingT
	Cleanup(func())
}) *PaymentGateway {
	mock := &PaymentGateway{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
