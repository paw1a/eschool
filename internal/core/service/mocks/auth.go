// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	domain "github.com/paw1a/eschool/internal/core/domain"
	mock "github.com/stretchr/testify/mock"
)

// AuthProvider is an autogenerated mock type for the IAuthProvider type
type AuthProvider struct {
	mock.Mock
}

// CreateJWTSession provides a mock function with given fields: payload, fingerprint
func (_m *AuthProvider) CreateJWTSession(payload domain.AuthPayload, fingerprint string) (domain.AuthDetails, error) {
	ret := _m.Called(payload, fingerprint)

	if len(ret) == 0 {
		panic("no return value specified for CreateJWTSession")
	}

	var r0 domain.AuthDetails
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.AuthPayload, string) (domain.AuthDetails, error)); ok {
		return rf(payload, fingerprint)
	}
	if rf, ok := ret.Get(0).(func(domain.AuthPayload, string) domain.AuthDetails); ok {
		r0 = rf(payload, fingerprint)
	} else {
		r0 = ret.Get(0).(domain.AuthDetails)
	}

	if rf, ok := ret.Get(1).(func(domain.AuthPayload, string) error); ok {
		r1 = rf(payload, fingerprint)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteJWTSession provides a mock function with given fields: refreshToken
func (_m *AuthProvider) DeleteJWTSession(refreshToken domain.Token) error {
	ret := _m.Called(refreshToken)

	if len(ret) == 0 {
		panic("no return value specified for DeleteJWTSession")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.Token) error); ok {
		r0 = rf(refreshToken)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RefreshJWTSession provides a mock function with given fields: refreshToken, fingerprint
func (_m *AuthProvider) RefreshJWTSession(refreshToken domain.Token, fingerprint string) (domain.AuthDetails, error) {
	ret := _m.Called(refreshToken, fingerprint)

	if len(ret) == 0 {
		panic("no return value specified for RefreshJWTSession")
	}

	var r0 domain.AuthDetails
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.Token, string) (domain.AuthDetails, error)); ok {
		return rf(refreshToken, fingerprint)
	}
	if rf, ok := ret.Get(0).(func(domain.Token, string) domain.AuthDetails); ok {
		r0 = rf(refreshToken, fingerprint)
	} else {
		r0 = ret.Get(0).(domain.AuthDetails)
	}

	if rf, ok := ret.Get(1).(func(domain.Token, string) error); ok {
		r1 = rf(refreshToken, fingerprint)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerifyJWTToken provides a mock function with given fields: accessToken
func (_m *AuthProvider) VerifyJWTToken(accessToken domain.Token) (domain.AuthPayload, error) {
	ret := _m.Called(accessToken)

	if len(ret) == 0 {
		panic("no return value specified for VerifyJWTToken")
	}

	var r0 domain.AuthPayload
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.Token) (domain.AuthPayload, error)); ok {
		return rf(accessToken)
	}
	if rf, ok := ret.Get(0).(func(domain.Token) domain.AuthPayload); ok {
		r0 = rf(accessToken)
	} else {
		r0 = ret.Get(0).(domain.AuthPayload)
	}

	if rf, ok := ret.Get(1).(func(domain.Token) error); ok {
		r1 = rf(accessToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAuthProvider creates a new instance of AuthProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthProvider {
	mock := &AuthProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
