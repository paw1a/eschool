// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/paw1a/eschool/internal/core/domain"
	mock "github.com/stretchr/testify/mock"
)

// StatRepository is an autogenerated mock type for the IStatRepository type
type StatRepository struct {
	mock.Mock
}

// CreateLessonStat provides a mock function with given fields: ctx, stat
func (_m *StatRepository) CreateLessonStat(ctx context.Context, stat domain.LessonStat) error {
	ret := _m.Called(ctx, stat)

	if len(ret) == 0 {
		panic("no return value specified for CreateLessonStat")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.LessonStat) error); ok {
		r0 = rf(ctx, stat)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindLessonStat provides a mock function with given fields: ctx, userID, lessonID
func (_m *StatRepository) FindLessonStat(ctx context.Context, userID domain.ID, lessonID domain.ID) (domain.LessonStat, error) {
	ret := _m.Called(ctx, userID, lessonID)

	if len(ret) == 0 {
		panic("no return value specified for FindLessonStat")
	}

	var r0 domain.LessonStat
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.ID, domain.ID) (domain.LessonStat, error)); ok {
		return rf(ctx, userID, lessonID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.ID, domain.ID) domain.LessonStat); ok {
		r0 = rf(ctx, userID, lessonID)
	} else {
		r0 = ret.Get(0).(domain.LessonStat)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.ID, domain.ID) error); ok {
		r1 = rf(ctx, userID, lessonID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateLessonStat provides a mock function with given fields: ctx, stat
func (_m *StatRepository) UpdateLessonStat(ctx context.Context, stat domain.LessonStat) error {
	ret := _m.Called(ctx, stat)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLessonStat")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.LessonStat) error); ok {
		r0 = rf(ctx, stat)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewStatRepository creates a new instance of StatRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStatRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *StatRepository {
	mock := &StatRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
