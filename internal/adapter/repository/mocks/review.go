// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/paw1a/eschool/internal/core/domain"
	dto "github.com/paw1a/eschool/internal/core/domain/dto"

	mock "github.com/stretchr/testify/mock"
)

// ReviewRepository is an autogenerated mock type for the IReviewRepository type
type ReviewRepository struct {
	mock.Mock
}

// CreateCourseReview provides a mock function with given fields: ctx, courseID, userID, reviewDTO
func (_m *ReviewRepository) CreateCourseReview(ctx context.Context, courseID int64, userID int64, reviewDTO dto.CreateReviewDTO) (domain.Review, error) {
	ret := _m.Called(ctx, courseID, userID, reviewDTO)

	var r0 domain.Review
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, dto.CreateReviewDTO) domain.Review); ok {
		r0 = rf(ctx, courseID, userID, reviewDTO)
	} else {
		r0 = ret.Get(0).(domain.Review)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, int64, dto.CreateReviewDTO) error); ok {
		r1 = rf(ctx, courseID, userID, reviewDTO)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, reviewID
func (_m *ReviewRepository) Delete(ctx context.Context, reviewID int64) error {
	ret := _m.Called(ctx, reviewID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, reviewID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields: ctx
func (_m *ReviewRepository) FindAll(ctx context.Context) ([]domain.Review, error) {
	ret := _m.Called(ctx)

	var r0 []domain.Review
	if rf, ok := ret.Get(0).(func(context.Context) []domain.Review); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Review)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: ctx, reviewID
func (_m *ReviewRepository) FindByID(ctx context.Context, reviewID int64) (domain.Review, error) {
	ret := _m.Called(ctx, reviewID)

	var r0 domain.Review
	if rf, ok := ret.Get(0).(func(context.Context, int64) domain.Review); ok {
		r0 = rf(ctx, reviewID)
	} else {
		r0 = ret.Get(0).(domain.Review)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, reviewID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindCourseReviews provides a mock function with given fields: ctx, courseID
func (_m *ReviewRepository) FindCourseReviews(ctx context.Context, courseID int64) ([]domain.Review, error) {
	ret := _m.Called(ctx, courseID)

	var r0 []domain.Review
	if rf, ok := ret.Get(0).(func(context.Context, int64) []domain.Review); ok {
		r0 = rf(ctx, courseID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Review)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, courseID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindUserReviews provides a mock function with given fields: ctx, userID
func (_m *ReviewRepository) FindUserReviews(ctx context.Context, userID int64) ([]domain.Review, error) {
	ret := _m.Called(ctx, userID)

	var r0 []domain.Review
	if rf, ok := ret.Get(0).(func(context.Context, int64) []domain.Review); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Review)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewReviewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewReviewRepository creates a new instance of ReviewRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewReviewRepository(t mockConstructorTestingTNewReviewRepository) *ReviewRepository {
	mock := &ReviewRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
