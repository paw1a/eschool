// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/paw1a/eschool/internal/core/domain"
	mock "github.com/stretchr/testify/mock"
)

// CertificateRepository is an autogenerated mock type for the ICertificateRepository type
type CertificateRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, cert
func (_m *CertificateRepository) Create(ctx context.Context, cert domain.Certificate) (domain.Certificate, error) {
	ret := _m.Called(ctx, cert)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 domain.Certificate
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Certificate) (domain.Certificate, error)); ok {
		return rf(ctx, cert)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.Certificate) domain.Certificate); ok {
		r0 = rf(ctx, cert)
	} else {
		r0 = ret.Get(0).(domain.Certificate)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.Certificate) error); ok {
		r1 = rf(ctx, cert)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAll provides a mock function with given fields: ctx
func (_m *CertificateRepository) FindAll(ctx context.Context) ([]domain.Certificate, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FindAll")
	}

	var r0 []domain.Certificate
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]domain.Certificate, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []domain.Certificate); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Certificate)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: ctx, certID
func (_m *CertificateRepository) FindByID(ctx context.Context, certID domain.ID) (domain.Certificate, error) {
	ret := _m.Called(ctx, certID)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 domain.Certificate
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.ID) (domain.Certificate, error)); ok {
		return rf(ctx, certID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.ID) domain.Certificate); ok {
		r0 = rf(ctx, certID)
	} else {
		r0 = ret.Get(0).(domain.Certificate)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.ID) error); ok {
		r1 = rf(ctx, certID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindUserCertificates provides a mock function with given fields: ctx, userID
func (_m *CertificateRepository) FindUserCertificates(ctx context.Context, userID domain.ID) ([]domain.Certificate, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for FindUserCertificates")
	}

	var r0 []domain.Certificate
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.ID) ([]domain.Certificate, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.ID) []domain.Certificate); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Certificate)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.ID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCertificateRepository creates a new instance of CertificateRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCertificateRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *CertificateRepository {
	mock := &CertificateRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
