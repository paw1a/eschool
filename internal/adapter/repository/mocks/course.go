// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/paw1a/eschool/internal/core/domain"
	dto "github.com/paw1a/eschool/internal/core/domain/dto"

	mock "github.com/stretchr/testify/mock"
)

// CourseRepository is an autogenerated mock type for the ICourseRepository type
type CourseRepository struct {
	mock.Mock
}

// AddCourseLesson provides a mock function with given fields: ctx, courseID, lessonID
func (_m *CourseRepository) AddCourseLesson(ctx context.Context, courseID int64, lessonID int64) error {
	ret := _m.Called(ctx, courseID, lessonID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) error); ok {
		r0 = rf(ctx, courseID, lessonID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddCourseStudent provides a mock function with given fields: ctx, studentID, courseID
func (_m *CourseRepository) AddCourseStudent(ctx context.Context, studentID int64, courseID int64) error {
	ret := _m.Called(ctx, studentID, courseID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) error); ok {
		r0 = rf(ctx, studentID, courseID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddCourseTeacher provides a mock function with given fields: ctx, teacherID, courseID
func (_m *CourseRepository) AddCourseTeacher(ctx context.Context, teacherID int64, courseID int64) error {
	ret := _m.Called(ctx, teacherID, courseID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) error); ok {
		r0 = rf(ctx, teacherID, courseID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Create provides a mock function with given fields: ctx, courseDTO
func (_m *CourseRepository) Create(ctx context.Context, courseDTO dto.CreateCourseDTO) (domain.Course, error) {
	ret := _m.Called(ctx, courseDTO)

	var r0 domain.Course
	if rf, ok := ret.Get(0).(func(context.Context, dto.CreateCourseDTO) domain.Course); ok {
		r0 = rf(ctx, courseDTO)
	} else {
		r0 = ret.Get(0).(domain.Course)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, dto.CreateCourseDTO) error); ok {
		r1 = rf(ctx, courseDTO)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, courseID
func (_m *CourseRepository) Delete(ctx context.Context, courseID int64) error {
	ret := _m.Called(ctx, courseID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, courseID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteCourseLesson provides a mock function with given fields: ctx, courseID, lessonID
func (_m *CourseRepository) DeleteCourseLesson(ctx context.Context, courseID int64, lessonID int64) error {
	ret := _m.Called(ctx, courseID, lessonID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) error); ok {
		r0 = rf(ctx, courseID, lessonID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields: ctx
func (_m *CourseRepository) FindAll(ctx context.Context) ([]domain.Course, error) {
	ret := _m.Called(ctx)

	var r0 []domain.Course
	if rf, ok := ret.Get(0).(func(context.Context) []domain.Course); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Course)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: ctx, courseID
func (_m *CourseRepository) FindByID(ctx context.Context, courseID int64) (domain.Course, error) {
	ret := _m.Called(ctx, courseID)

	var r0 domain.Course
	if rf, ok := ret.Get(0).(func(context.Context, int64) domain.Course); ok {
		r0 = rf(ctx, courseID)
	} else {
		r0 = ret.Get(0).(domain.Course)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, courseID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindCourseInfo provides a mock function with given fields: ctx, courseID
func (_m *CourseRepository) FindCourseInfo(ctx context.Context, courseID int64) (dto.CourseInfo, error) {
	ret := _m.Called(ctx, courseID)

	var r0 dto.CourseInfo
	if rf, ok := ret.Get(0).(func(context.Context, int64) dto.CourseInfo); ok {
		r0 = rf(ctx, courseID)
	} else {
		r0 = ret.Get(0).(dto.CourseInfo)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, courseID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindStudentCourses provides a mock function with given fields: ctx, studentID
func (_m *CourseRepository) FindStudentCourses(ctx context.Context, studentID int64) ([]domain.Course, error) {
	ret := _m.Called(ctx, studentID)

	var r0 []domain.Course
	if rf, ok := ret.Get(0).(func(context.Context, int64) []domain.Course); ok {
		r0 = rf(ctx, studentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Course)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, studentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindTeacherCourses provides a mock function with given fields: ctx, teacherID
func (_m *CourseRepository) FindTeacherCourses(ctx context.Context, teacherID int64) ([]domain.Course, error) {
	ret := _m.Called(ctx, teacherID)

	var r0 []domain.Course
	if rf, ok := ret.Get(0).(func(context.Context, int64) []domain.Course); ok {
		r0 = rf(ctx, teacherID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Course)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, teacherID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, courseID, courseDTO
func (_m *CourseRepository) Update(ctx context.Context, courseID int64, courseDTO dto.UpdateCourseDTO) (domain.Course, error) {
	ret := _m.Called(ctx, courseID, courseDTO)

	var r0 domain.Course
	if rf, ok := ret.Get(0).(func(context.Context, int64, dto.UpdateCourseDTO) domain.Course); ok {
		r0 = rf(ctx, courseID, courseDTO)
	} else {
		r0 = ret.Get(0).(domain.Course)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, dto.UpdateCourseDTO) error); ok {
		r1 = rf(ctx, courseID, courseDTO)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewCourseRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewCourseRepository creates a new instance of CourseRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCourseRepository(t mockConstructorTestingTNewCourseRepository) *CourseRepository {
	mock := &CourseRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
