// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/paw1a/eschool/internal/core/domain"
	mock "github.com/stretchr/testify/mock"
)

// LessonRepository is an autogenerated mock type for the ILessonRepository type
type LessonRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, lesson
func (_m *LessonRepository) Create(ctx context.Context, lesson domain.Lesson) (domain.Lesson, error) {
	ret := _m.Called(ctx, lesson)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 domain.Lesson
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Lesson) (domain.Lesson, error)); ok {
		return rf(ctx, lesson)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.Lesson) domain.Lesson); ok {
		r0 = rf(ctx, lesson)
	} else {
		r0 = ret.Get(0).(domain.Lesson)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.Lesson) error); ok {
		r1 = rf(ctx, lesson)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, lessonID
func (_m *LessonRepository) Delete(ctx context.Context, lessonID domain.ID) error {
	ret := _m.Called(ctx, lessonID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.ID) error); ok {
		r0 = rf(ctx, lessonID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields: ctx
func (_m *LessonRepository) FindAll(ctx context.Context) ([]domain.Lesson, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FindAll")
	}

	var r0 []domain.Lesson
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]domain.Lesson, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []domain.Lesson); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Lesson)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: ctx, lessonID
func (_m *LessonRepository) FindByID(ctx context.Context, lessonID domain.ID) (domain.Lesson, error) {
	ret := _m.Called(ctx, lessonID)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 domain.Lesson
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.ID) (domain.Lesson, error)); ok {
		return rf(ctx, lessonID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.ID) domain.Lesson); ok {
		r0 = rf(ctx, lessonID)
	} else {
		r0 = ret.Get(0).(domain.Lesson)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.ID) error); ok {
		r1 = rf(ctx, lessonID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindCourseLessons provides a mock function with given fields: ctx, courseID
func (_m *LessonRepository) FindCourseLessons(ctx context.Context, courseID domain.ID) ([]domain.Lesson, error) {
	ret := _m.Called(ctx, courseID)

	if len(ret) == 0 {
		panic("no return value specified for FindCourseLessons")
	}

	var r0 []domain.Lesson
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.ID) ([]domain.Lesson, error)); ok {
		return rf(ctx, courseID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.ID) []domain.Lesson); ok {
		r0 = rf(ctx, courseID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Lesson)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.ID) error); ok {
		r1 = rf(ctx, courseID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindLessonTests provides a mock function with given fields: ctx, lessonID
func (_m *LessonRepository) FindLessonTests(ctx context.Context, lessonID domain.ID) ([]domain.Test, error) {
	ret := _m.Called(ctx, lessonID)

	if len(ret) == 0 {
		panic("no return value specified for FindLessonTests")
	}

	var r0 []domain.Test
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.ID) ([]domain.Test, error)); ok {
		return rf(ctx, lessonID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.ID) []domain.Test); ok {
		r0 = rf(ctx, lessonID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Test)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.ID) error); ok {
		r1 = rf(ctx, lessonID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, lesson
func (_m *LessonRepository) Update(ctx context.Context, lesson domain.Lesson) (domain.Lesson, error) {
	ret := _m.Called(ctx, lesson)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 domain.Lesson
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Lesson) (domain.Lesson, error)); ok {
		return rf(ctx, lesson)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.Lesson) domain.Lesson); ok {
		r0 = rf(ctx, lesson)
	} else {
		r0 = ret.Get(0).(domain.Lesson)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.Lesson) error); ok {
		r1 = rf(ctx, lesson)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewLessonRepository creates a new instance of LessonRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLessonRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *LessonRepository {
	mock := &LessonRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
