// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/paw1a/eschool/internal/core/domain"
	dto "github.com/paw1a/eschool/internal/core/domain/dto"

	mock "github.com/stretchr/testify/mock"
)

// LessonRepository is an autogenerated mock type for the ILessonRepository type
type LessonRepository struct {
	mock.Mock
}

// AddLessonTests provides a mock function with given fields: ctx, lessonID, tests
func (_m *LessonRepository) AddLessonTests(ctx context.Context, lessonID int64, tests []dto.CreateTestDTO) error {
	ret := _m.Called(ctx, lessonID, tests)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, []dto.CreateTestDTO) error); ok {
		r0 = rf(ctx, lessonID, tests)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Create provides a mock function with given fields: ctx, lessonDTO
func (_m *LessonRepository) Create(ctx context.Context, lessonDTO dto.CreateLessonDTO) (domain.Lesson, error) {
	ret := _m.Called(ctx, lessonDTO)

	var r0 domain.Lesson
	if rf, ok := ret.Get(0).(func(context.Context, dto.CreateLessonDTO) domain.Lesson); ok {
		r0 = rf(ctx, lessonDTO)
	} else {
		r0 = ret.Get(0).(domain.Lesson)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, dto.CreateLessonDTO) error); ok {
		r1 = rf(ctx, lessonDTO)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, lessonID
func (_m *LessonRepository) Delete(ctx context.Context, lessonID int64) error {
	ret := _m.Called(ctx, lessonID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, lessonID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteLessonTest provides a mock function with given fields: ctx, lessonID, testID
func (_m *LessonRepository) DeleteLessonTest(ctx context.Context, lessonID int64, testID int64) error {
	ret := _m.Called(ctx, lessonID, testID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) error); ok {
		r0 = rf(ctx, lessonID, testID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields: ctx
func (_m *LessonRepository) FindAll(ctx context.Context) ([]domain.Lesson, error) {
	ret := _m.Called(ctx)

	var r0 []domain.Lesson
	if rf, ok := ret.Get(0).(func(context.Context) []domain.Lesson); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Lesson)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: ctx, lessonID
func (_m *LessonRepository) FindByID(ctx context.Context, lessonID int64) (domain.Lesson, error) {
	ret := _m.Called(ctx, lessonID)

	var r0 domain.Lesson
	if rf, ok := ret.Get(0).(func(context.Context, int64) domain.Lesson); ok {
		r0 = rf(ctx, lessonID)
	} else {
		r0 = ret.Get(0).(domain.Lesson)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, lessonID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindCourseLessons provides a mock function with given fields: ctx, courseID
func (_m *LessonRepository) FindCourseLessons(ctx context.Context, courseID int64) ([]domain.Lesson, error) {
	ret := _m.Called(ctx, courseID)

	var r0 []domain.Lesson
	if rf, ok := ret.Get(0).(func(context.Context, int64) []domain.Lesson); ok {
		r0 = rf(ctx, courseID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Lesson)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, courseID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateLessonTest provides a mock function with given fields: ctx, lessonID, testID, testDTO
func (_m *LessonRepository) UpdateLessonTest(ctx context.Context, lessonID int64, testID int64, testDTO dto.UpdateTestDTO) (domain.Test, error) {
	ret := _m.Called(ctx, lessonID, testID, testDTO)

	var r0 domain.Test
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, dto.UpdateTestDTO) domain.Test); ok {
		r0 = rf(ctx, lessonID, testID, testDTO)
	} else {
		r0 = ret.Get(0).(domain.Test)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, int64, dto.UpdateTestDTO) error); ok {
		r1 = rf(ctx, lessonID, testID, testDTO)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateLessonTheory provides a mock function with given fields: ctx, lessonID, theoryDTO
func (_m *LessonRepository) UpdateLessonTheory(ctx context.Context, lessonID int64, theoryDTO dto.UpdateTheoryDTO) error {
	ret := _m.Called(ctx, lessonID, theoryDTO)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, dto.UpdateTheoryDTO) error); ok {
		r0 = rf(ctx, lessonID, theoryDTO)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateLessonVideo provides a mock function with given fields: ctx, lessonID, videoDTO
func (_m *LessonRepository) UpdateLessonVideo(ctx context.Context, lessonID int64, videoDTO dto.UpdateVideoDTO) error {
	ret := _m.Called(ctx, lessonID, videoDTO)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, dto.UpdateVideoDTO) error); ok {
		r0 = rf(ctx, lessonID, videoDTO)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewLessonRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewLessonRepository creates a new instance of LessonRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewLessonRepository(t mockConstructorTestingTNewLessonRepository) *LessonRepository {
	mock := &LessonRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
